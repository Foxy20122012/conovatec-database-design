jest.mock('os');

const fs = require('fs');
const path = require('path');
const getJarPath = require('./getJarPath');

describe('getJarPath interface', () => {
    beforeEach(() => {
        require('os').__platform = 'win32';
    });
    test('typeof getJarPath should be a function', () => {
        expect(typeof getJarPath).toBe('function');
    });
    test('getJarPath() should return string', () => {
        expect(typeof getJarPath()).toBe('string');
    });
});

describe('getJarPath for Windows OS', () => {
    beforeEach(() => {
        require('os').__platform = 'win32';
    });
    test('getJarPath() should return appropriate path', () => {
        expect(getJarPath()).toBe(path.resolve(__dirname, '../bin/win32/plantuml.jar'));
    });
    test('.jar file should exist under getJarPath() path', () => {
        expect(() => { fs.readFileSync(getJarPath()) }).not.toThrow();
    });
});

describe('getJarPath for Linux OS', () => {
    beforeEach(() => {
        require('os').__platform = 'linux';
    });
    test('getJarPath() should return appropriate path', () => {
        expect(getJarPath()).toBe(path.resolve(__dirname, '../bin/linux/plantuml.jar'));
    });
    test('.jar file should exist under getJarPath() path', () => {
        expect(() => { fs.readFileSync(getJarPath()) }).not.toThrow();
    });
});

describe('getJarPath for Mac OSX (darwin)', () => {
    beforeEach(() => {
        require('os').__platform = 'darwin';
    });
    test('getJarPath() should return appropriate path', () => {
        expect(getJarPath()).toBe(path.resolve(__dirname, '../bin/macosx/plantuml.jar'));
    });
    test('.jar file should exist under getJarPath() path', () => {
        expect(() => { fs.readFileSync(getJarPath()) }).not.toThrow();
    });
});

describe('getJarPath for unsupported OS', () => {
    beforeEach(() => {
        require('os').__platform = 'other';
    });
    test('getJarPath() should throw an error', () => {
        expect(() => { getJarPath() }).toThrow(`Unsupported OS ${require('os').__platform}`);
    });
});
